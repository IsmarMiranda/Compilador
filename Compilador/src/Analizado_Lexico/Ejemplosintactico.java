
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 19 15:26:34 CST 2018
//----------------------------------------------------

package Analizado_Lexico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 19 15:26:34 CST 2018
  */
public class Ejemplosintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Ejemplosintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Ejemplosintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Ejemplosintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\007\000\002\004\010\000" +
    "\002\010\003\000\002\010\003\000\002\005\004\000\002" +
    "\005\004\000\002\005\003\000\002\005\003\000\002\011" +
    "\013\000\002\011\012\000\002\012\012\000\002\012\011" +
    "\000\002\014\006\000\002\014\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\015" +
    "\005\000\002\023\005\000\002\023\003\000\002\017\004" +
    "\000\002\017\004\000\002\017\003\000\002\017\003\000" +
    "\002\024\004\000\002\024\004\000\002\024\004\000\002" +
    "\024\004\000\002\024\004\000\002\024\004\000\002\020" +
    "\003\000\002\020\003\000\002\025\020\000\002\025\016" +
    "\000\002\027\005\000\002\031\003\000\002\031\003\000" +
    "\002\021\004\000\002\021\004\000\002\042\003\000\002" +
    "\042\003\000\002\032\014\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\033\014\000\002\034\006" +
    "\000\002\016\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\022\004\030\005\016\007\017\010\035\011" +
    "\026\015\025\017\033\065\010\001\002\000\004\002\226" +
    "\001\002\000\026\002\uffe7\004\uffe7\005\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\015\uffe7\017\uffe7\065\uffe7\001\002" +
    "\000\026\002\uffea\004\uffea\005\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\015\uffea\017\uffea\065\uffea\001\002\000\026" +
    "\002\uffec\004\uffec\005\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\015\uffec\017\uffec\065\uffec\001\002\000\006\007\221" +
    "\010\035\001\002\000\024\002\ufffc\004\ufffc\005\ufffc\007" +
    "\ufffc\010\ufffc\011\ufffc\015\ufffc\017\ufffc\065\ufffc\001\002" +
    "\000\024\002\ufff4\004\ufff4\005\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\015\ufff4\017\ufff4\065\ufff4\001\002\000\024\002\ufffb" +
    "\004\ufffb\005\ufffb\007\ufffb\010\ufffb\011\ufffb\015\ufffb\017" +
    "\ufffb\065\ufffb\001\002\000\024\002\uffff\004\030\005\016" +
    "\007\017\010\035\011\026\015\025\017\033\065\010\001" +
    "\002\000\026\002\uffd8\004\uffd8\005\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\015\uffd8\017\uffd8\065\uffd8\001\002\000" +
    "\042\002\uffe0\004\uffe0\005\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\015\uffe0\017\uffe0\036\131\037\124\040\125\041" +
    "\132\042\126\047\127\065\uffe0\001\002\000\004\005\206" +
    "\001\002\000\024\002\ufffe\004\ufffe\005\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\015\ufffe\017\ufffe\065\ufffe\001\002\000\004" +
    "\005\201\001\002\000\024\002\ufffd\004\ufffd\005\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\015\ufffd\017\ufffd\065\ufffd\001\002" +
    "\000\026\002\uffe9\004\uffe9\005\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\015\uffe9\017\uffe9\065\uffe9\001\002\000\004" +
    "\012\163\001\002\000\006\005\152\064\153\001\002\000" +
    "\004\060\141\001\002\000\026\002\uffe6\004\uffe6\005\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\015\uffe6\017\uffe6\065" +
    "\uffe6\001\002\000\042\002\uffdf\004\uffdf\005\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\015\uffdf\017\uffdf\036\131\037" +
    "\124\040\125\041\132\042\126\047\127\065\uffdf\001\002" +
    "\000\026\002\uffd7\004\uffd7\005\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\015\uffd7\017\uffd7\065\uffd7\001\002\000\026" +
    "\002\uffeb\004\uffeb\005\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\015\uffeb\017\uffeb\065\uffeb\001\002\000\004\060\072" +
    "\001\002\000\026\002\uffe8\004\uffe8\005\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\015\uffe8\017\uffe8\065\uffe8\001\002" +
    "\000\004\005\037\001\002\000\024\002\ufff3\004\ufff3\005" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\015\ufff3\017\ufff3\065\ufff3" +
    "\001\002\000\004\060\060\001\002\000\004\005\041\001" +
    "\002\000\004\060\042\001\002\000\004\061\044\001\002" +
    "\000\004\061\054\001\002\000\004\054\051\001\002\000" +
    "\004\005\046\001\002\000\006\056\047\061\uffed\001\002" +
    "\000\002\001\002\000\004\061\uffee\001\002\000\004\065" +
    "\052\001\002\000\014\004\030\005\016\011\026\015\025" +
    "\017\033\001\002\000\024\002\ufff0\004\ufff0\005\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\015\ufff0\017\ufff0\065\ufff0\001\002" +
    "\000\004\054\055\001\002\000\004\065\056\001\002\000" +
    "\014\004\030\005\016\011\026\015\025\017\033\001\002" +
    "\000\024\002\ufff2\004\ufff2\005\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\015\ufff2\017\ufff2\065\ufff2\001\002\000\004\061\062" +
    "\001\002\000\004\061\066\001\002\000\004\054\063\001" +
    "\002\000\004\065\064\001\002\000\014\004\030\005\016" +
    "\011\026\015\025\017\033\001\002\000\024\002\uffef\004" +
    "\uffef\005\uffef\007\uffef\010\uffef\011\uffef\015\uffef\017\uffef" +
    "\065\uffef\001\002\000\004\054\067\001\002\000\004\065" +
    "\070\001\002\000\014\004\030\005\016\011\026\015\025" +
    "\017\033\001\002\000\024\002\ufff1\004\ufff1\005\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\015\ufff1\017\ufff1\065\ufff1\001\002" +
    "\000\004\005\073\001\002\000\004\050\122\001\002\000" +
    "\004\020\075\001\002\000\004\005\076\001\002\000\010" +
    "\043\102\044\100\051\077\001\002\000\004\004\uffca\001" +
    "\002\000\004\004\uffcc\001\002\000\004\004\103\001\002" +
    "\000\004\004\uffcb\001\002\000\010\022\107\023\105\061" +
    "\106\001\002\000\004\004\114\001\002\000\004\004\uffd2" +
    "\001\002\000\004\024\110\001\002\000\004\004\uffd3\001" +
    "\002\000\004\054\111\001\002\000\004\065\112\001\002" +
    "\000\014\004\030\005\016\011\026\015\025\017\033\001" +
    "\002\000\026\002\uffd5\004\uffd5\005\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\012\uffd5\015\uffd5\017\uffd5\065\uffd5\001\002\000" +
    "\004\061\115\001\002\000\004\024\116\001\002\000\004" +
    "\054\117\001\002\000\004\065\120\001\002\000\014\004" +
    "\030\005\016\011\026\015\025\017\033\001\002\000\026" +
    "\002\uffd6\004\uffd6\005\uffd6\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\015\uffd6\017\uffd6\065\uffd6\001\002\000\004\004\123" +
    "\001\002\000\004\020\uffd4\001\002\000\006\004\030\005" +
    "\016\001\002\000\006\004\030\005\016\001\002\000\006" +
    "\004\030\005\016\001\002\000\006\004\030\005\016\001" +
    "\002\000\026\002\uffe1\004\uffe1\005\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\015\uffe1\017\uffe1\065\uffe1\001\002\000" +
    "\006\004\030\005\016\001\002\000\006\004\030\005\016" +
    "\001\002\000\026\002\uffdb\004\uffdb\005\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\015\uffdb\017\uffdb\065\uffdb\001\002" +
    "\000\026\002\uffde\004\uffde\005\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\015\uffde\017\uffde\065\uffde\001\002\000\026" +
    "\002\uffda\004\uffda\005\uffda\007\uffda\010\uffda\011\uffda\012" +
    "\uffda\015\uffda\017\uffda\065\uffda\001\002\000\026\002\uffd9" +
    "\004\uffd9\005\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\015" +
    "\uffd9\017\uffd9\065\uffd9\001\002\000\026\002\uffdc\004\uffdc" +
    "\005\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\015\uffdc\017" +
    "\uffdc\065\uffdc\001\002\000\026\002\uffdd\004\uffdd\005\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\015\uffdd\017\uffdd\065" +
    "\uffdd\001\002\000\004\005\142\001\002\000\010\043\102" +
    "\044\100\051\077\001\002\000\004\004\144\001\002\000" +
    "\004\061\145\001\002\000\004\013\146\001\002\000\004" +
    "\054\147\001\002\000\004\065\150\001\002\000\014\004" +
    "\030\005\016\011\026\015\025\017\033\001\002\000\004" +
    "\012\uffcd\001\002\000\006\055\uffc4\056\160\001\002\000" +
    "\006\055\uffc3\056\156\001\002\000\004\055\155\001\002" +
    "\000\026\002\uffc7\004\uffc7\005\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\015\uffc7\017\uffc7\065\uffc7\001\002\000\006" +
    "\005\152\064\153\001\002\000\004\055\uffc5\001\002\000" +
    "\006\005\152\064\153\001\002\000\004\055\uffc6\001\002" +
    "\000\026\002\uffd1\004\uffd1\005\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\015\uffd1\017\uffd1\065\uffd1\001\002\000\006" +
    "\054\165\060\166\001\002\000\026\002\uffd0\004\uffd0\005" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\015\uffd0\017\uffd0" +
    "\065\uffd0\001\002\000\004\065\177\001\002\000\004\005" +
    "\167\001\002\000\010\043\102\044\100\051\077\001\002" +
    "\000\004\004\171\001\002\000\004\061\172\001\002\000" +
    "\004\013\173\001\002\000\004\054\174\001\002\000\004" +
    "\065\175\001\002\000\014\004\030\005\016\011\026\015" +
    "\025\017\033\001\002\000\026\002\uffc9\004\uffc9\005\uffc9" +
    "\007\uffc9\010\uffc9\011\uffc9\012\uffc9\015\uffc9\017\uffc9\065" +
    "\uffc9\001\002\000\014\004\030\005\016\011\026\015\025" +
    "\017\033\001\002\000\026\002\uffc8\004\uffc8\005\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\015\uffc8\017\uffc8\065\uffc8" +
    "\001\002\000\006\055\uffe3\056\204\001\002\000\004\055" +
    "\203\001\002\000\026\002\uffe5\004\uffe5\005\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\015\uffe5\017\uffe5\065\uffe5\001" +
    "\002\000\004\005\201\001\002\000\004\055\uffe4\001\002" +
    "\000\004\054\207\001\002\000\004\065\210\001\002\000" +
    "\020\004\030\005\016\010\035\011\026\015\025\017\033" +
    "\065\212\001\002\000\024\002\ufffa\004\ufffa\005\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\015\ufffa\017\ufffa\065\ufffa\001\002" +
    "\000\004\010\035\001\002\000\024\002\ufff7\004\ufff7\005" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\015\ufff7\017\ufff7\065\ufff7" +
    "\001\002\000\024\002\ufff8\004\ufff8\005\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\015\ufff8\017\ufff8\065\ufff8\001\002\000\024" +
    "\002\ufff6\004\ufff6\005\ufff6\007\ufff6\010\ufff6\011\ufff6\015" +
    "\ufff6\017\ufff6\065\ufff6\001\002\000\024\002\ufff5\004\ufff5" +
    "\005\ufff5\007\ufff5\010\ufff5\011\ufff5\015\ufff5\017\ufff5\065" +
    "\ufff5\001\002\000\026\002\uffe2\004\uffe2\005\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\015\uffe2\017\uffe2\065\uffe2\001" +
    "\002\000\004\002\000\001\002\000\004\005\222\001\002" +
    "\000\004\054\223\001\002\000\004\065\224\001\002\000" +
    "\020\004\030\005\016\010\035\011\026\015\025\017\033" +
    "\065\212\001\002\000\024\002\ufff9\004\ufff9\005\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\015\ufff9\017\ufff9\065\ufff9\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\050\002\003\003\013\004\017\005\021\006" +
    "\010\007\012\011\011\012\035\013\020\015\006\016\031" +
    "\017\005\020\022\021\033\022\004\025\014\026\030\032" +
    "\023\041\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\214\012" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\002\217\003\013\004\017\005\021\006" +
    "\010\007\012\011\011\012\035\013\020\015\006\016\031" +
    "\017\005\020\022\021\033\022\004\025\014\026\030\032" +
    "\023\041\026\001\001\000\002\001\001\000\004\024\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\163\034\161\001\001\000\004\035\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\044\014\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\044\014\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\052\013\020\015\006\016\031\017\005\020" +
    "\022\021\033\022\004\025\014\026\030\032\023\041\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\007\056\013\020\015\006\016\031\017\005" +
    "\020\022\021\033\022\004\025\014\026\030\032\023\041" +
    "\026\001\001\000\002\001\001\000\006\013\044\014\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\007\064\013\020\015\006\016\031\017\005" +
    "\020\022\021\033\022\004\025\014\026\030\032\023\041" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\070\013\020\015\006\016\031\017" +
    "\005\020\022\021\033\022\004\025\014\026\030\032\023" +
    "\041\026\001\001\000\002\001\001\000\004\027\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\112\013\020\015\006\016\031\017\005\020" +
    "\022\021\033\022\004\025\014\026\030\032\023\041\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\120" +
    "\013\020\015\006\016\031\017\005\020\022\021\033\022" +
    "\004\025\014\026\030\032\023\041\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\137\001\001\000\004\017\136\001\001\000\004\017\135" +
    "\001\001\000\004\017\134\001\001\000\002\001\001\000" +
    "\004\017\133\001\001\000\004\017\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\150\013\020\015\006\016\031\017\005\020" +
    "\022\021\033\022\004\025\014\026\030\032\023\041\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\156" +
    "\001\001\000\002\001\001\000\004\035\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\007" +
    "\175\013\020\015\006\016\031\017\005\020\022\021\033" +
    "\022\004\025\014\026\030\032\023\041\026\001\001\000" +
    "\002\001\001\000\032\007\177\013\020\015\006\016\031" +
    "\017\005\020\022\021\033\022\004\025\014\026\030\032" +
    "\023\041\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\005\213\007\212\010\210\011\011\012\035\013" +
    "\020\015\006\016\031\017\005\020\022\021\033\022\004" +
    "\025\014\026\030\032\023\041\026\001\001\000\002\001" +
    "\001\000\006\011\214\012\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\005\213\007\212\010" +
    "\224\011\011\012\035\013\020\015\006\016\031\017\005" +
    "\020\022\021\033\022\004\025\014\026\030\032\023\041" +
    "\026\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Ejemplosintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Ejemplosintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Ejemplosintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Ejemplosintactico$actions {
  private final Ejemplosintactico parser;

  /** Constructor */
  CUP$Ejemplosintactico$actions(Ejemplosintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Ejemplosintactico$do_action(
    int                        CUP$Ejemplosintactico$act_num,
    java_cup.runtime.lr_parser CUP$Ejemplosintactico$parser,
    java.util.Stack            CUP$Ejemplosintactico$stack,
    int                        CUP$Ejemplosintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Ejemplosintactico$result;

      /* select the action based on the action number */
      switch (CUP$Ejemplosintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPOESCRITURA ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("TIPOESCRITURA",27, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPOESCRITURA ::= ID 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("TIPOESCRITURA",27, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPOESCRITURA ::= TEXTO COMA TIPOESCRITURA 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("TIPOESCRITURA",27, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPOESCRITURA ::= ID COMA TIPOESCRITURA 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("TIPOESCRITURA",27, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ESCRITURA ::= ESCRIBIR TIPOESCRITURA PCOMA 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",12, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SINON ::= SINO DOSP TAB CODIGO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("SINON",26, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SINOCOND ::= SINO PARINI ID TIPOCOND NUMERO PARFIN ENTONCES DOSP TAB CODIGO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("SINOCOND",25, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOCOND ::= DIGUAL 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("TIPOCOND",22, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOCOND ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("TIPOCOND",22, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPOCOND ::= MENOR 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("TIPOCOND",22, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICIONSI ::= SI PARINI ID TIPOCOND NUMERO PARFIN ENTONCES DOSP TAB CODIGO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONSI",24, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPOCONDICION ::= SINON 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("TIPOCONDICION",32, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPOCONDICION ::= SINOCOND 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("TIPOCONDICION",32, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICION ::= CONDICIONSI SINOCOND 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICION ::= CONDICIONSI SINON 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INCREMENTODEC ::= DECREMENTAR 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTODEC",23, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INCREMENTODEC ::= INCREMENTAR 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTODEC",23, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARDESDE ::= ID IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("VARDESDE",21, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CDESDE ::= DESDE PARINI VARDESDE MIENTRAS ID TIPOCOND NUMERO PARFIN ITERAR DOSP TAB CODIGO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("CDESDE",19, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CDESDE ::= DESDE PARINI VARDESDE MIENTRAS ID TIPOCOND NUMERO INCREMENTODEC NUMERO PARFIN ITERAR DOSP TAB CODIGO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("CDESDE",19, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CICLO ::= CPARACADA 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("CICLO",14, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CICLO ::= CDESDE 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("CICLO",14, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION1 ::= POTENCIA OPERACION 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("OPERACION1",18, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION1 ::= MODULO OPERACION 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("OPERACION1",18, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION1 ::= DIV OPERACION 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("OPERACION1",18, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION1 ::= MULT OPERACION 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("OPERACION1",18, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION1 ::= RESTA OPERACION 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("OPERACION1",18, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION1 ::= SUMA OPERACION 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("OPERACION1",18, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION ::= ID 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION ::= NUMERO OPERACION1 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION ::= ID OPERACION1 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARIABLES ::= ID 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VARIABLES ::= ID COMA VARIABLES 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECVARIABLE ::= TIPO VARIABLES PCOMA 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLE",11, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CODIGO ::= DECARCHIVO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",5, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CODIGO ::= OPERARCHIVO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",5, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CODIGO ::= CONDICION 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",5, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CODIGO ::= CICLO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",5, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CODIGO ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",5, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CODIGO ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",5, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CODIGO ::= DECVARIABLE 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",5, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROSR ::= TIPO ID 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",10, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROSR ::= TIPO ID COMA PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",10, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUN ::= FUNCION ID PARINI PARFIN DOSP TAB CODIGO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("FUN",8, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUN ::= FUNCION TIPO ID PARINI PARFIN DOSP TAB CODIGO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("FUN",8, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNP ::= FUNCION ID PARINI PARAMETROSR PARFIN DOSP TAB CODIGO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("FUNP",7, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNP ::= FUNCION TIPO ID PARINI PARAMETROSR PARFIN DOSP TAB CODIGO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("FUNP",7, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECFUNCION ::= FUN 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",3, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECFUNCION ::= FUNP 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",3, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECFUNCION ::= TAB FUN 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",3, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECFUNCION ::= TAB FUNP 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCION",3, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CODIGOCLASE ::= CODIGO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("CODIGOCLASE",6, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CODIGOCLASE ::= DECFUNCION 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("CODIGOCLASE",6, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECCLASE ::= TAB CLASE ID DOSP TAB CODIGOCLASE 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("DECCLASE",2, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECCLASE ::= CLASE ID DOSP TAB CODIGOCLASE 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("DECCLASE",2, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LCODIGO ::= CODIGO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("LCODIGO",1, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LCODIGO ::= DECLIBRERIA 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("LCODIGO",1, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LCODIGO ::= DECFUNCION 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("LCODIGO",1, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LCODIGO ::= DECCLASE 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("LCODIGO",1, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= LCODIGO 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= LCODIGO PROGRAMA 
            {
              Object RESULT =null;

              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          return CUP$Ejemplosintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)).value;
		RESULT = start_val;
              CUP$Ejemplosintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.elementAt(CUP$Ejemplosintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Ejemplosintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Ejemplosintactico$parser.done_parsing();
          return CUP$Ejemplosintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

