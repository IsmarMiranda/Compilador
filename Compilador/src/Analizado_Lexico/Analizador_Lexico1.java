/* The following code was generated by JFlex 1.6.1 */

package Analizado_Lexico;

import java_cup.runtime.Symbol;


import java.util.ArrayList;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.FileNotFoundException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Analizado_Lexico/Ejemplo.jflex</tt>
 */
public class Analizador_Lexico1 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\57\1\57\1\57\1\57\22\0\1\4\1\0\1\56"+
    "\1\61\1\61\1\44\1\61\1\61\1\53\1\54\1\31\1\27\1\51"+
    "\1\30\1\52\1\32\1\1\11\2\1\47\1\50\1\34\1\36\1\35"+
    "\2\0\1\41\2\3\1\43\11\3\1\42\1\37\2\3\1\40\10\3"+
    "\1\45\1\0\1\46\1\33\2\0\1\13\1\21\1\7\1\22\1\15"+
    "\1\16\1\3\1\24\1\5\2\3\1\10\1\23\1\6\1\17\1\25"+
    "\1\3\1\12\1\14\1\20\1\11\1\26\4\3\1\55\1\0\1\55"+
    "\7\0\1\57\32\0\1\60\1\61\35\0\1\61\u15c0\0\1\60\u097f\0"+
    "\13\60\35\0\1\57\1\57\5\0\1\60\57\0\1\60\u0fa0\0\1\60"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\16\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\3\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\1\7\3\1\26\13\3\1\0\1\27\1\30\1\31"+
    "\1\3\1\0\24\3\3\0\2\27\1\32\2\0\3\3"+
    "\1\33\5\3\1\34\13\3\2\0\3\27\1\35\1\0"+
    "\4\3\1\36\2\3\1\37\3\3\1\40\1\3\1\41"+
    "\1\3\1\42\5\3\1\43\1\44\1\45\11\3\1\46"+
    "\4\3\1\47\6\3\1\50\1\51\1\52\1\53\1\54"+
    "\1\3\1\55\2\3\1\56\1\57\1\3\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\62\0\144\0\226\0\62\0\310\0\372"+
    "\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a"+
    "\0\u02bc\0\u02ee\0\u0320\0\u0352\0\62\0\62\0\62\0\u0384"+
    "\0\62\0\u03b6\0\u03b6\0\u03e8\0\u041a\0\62\0\62\0\62"+
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\62\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc"+
    "\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c"+
    "\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\62\0\226\0\u0898"+
    "\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\u0dac\0\226\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\226\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\226\0\u0fd2"+
    "\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162"+
    "\0\u1194\0\u11c6\0\u11f8\0\u122a\0\62\0\u125c\0\u128e\0\62"+
    "\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\226\0\u13ba\0\u13ec"+
    "\0\226\0\u141e\0\u1450\0\u1482\0\226\0\u14b4\0\226\0\u14e6"+
    "\0\226\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\226\0\226"+
    "\0\226\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e"+
    "\0\u1770\0\u17a2\0\226\0\u17d4\0\u1806\0\u1838\0\u186a\0\226"+
    "\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\226\0\226"+
    "\0\226\0\226\0\226\0\u19c8\0\226\0\u19fa\0\u1a2c\0\226"+
    "\0\226\0\u1a5e\0\226";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\5\1\12\1\13\1\14\1\15\1\16\2\5\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\2\1\34\1\5\1\35"+
    "\2\5\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\0\2\2\63\0\2\4"+
    "\60\0\3\5\1\0\22\5\10\0\5\5\17\0\3\5"+
    "\1\0\1\5\1\51\11\5\1\52\6\5\10\0\5\5"+
    "\17\0\3\5\1\0\4\5\1\53\15\5\10\0\5\5"+
    "\17\0\3\5\1\0\3\5\1\54\2\5\1\55\13\5"+
    "\10\0\5\5\17\0\3\5\1\0\10\5\1\56\11\5"+
    "\10\0\5\5\17\0\3\5\1\0\14\5\1\57\5\5"+
    "\10\0\5\5\17\0\3\5\1\0\1\60\21\5\10\0"+
    "\5\5\17\0\3\5\1\0\1\5\1\61\5\5\1\62"+
    "\12\5\10\0\5\5\17\0\3\5\1\0\4\5\1\63"+
    "\1\5\1\64\13\5\10\0\5\5\17\0\3\5\1\0"+
    "\12\5\1\65\7\5\10\0\5\5\17\0\3\5\1\0"+
    "\10\5\1\66\11\5\10\0\5\5\17\0\3\5\1\0"+
    "\1\67\21\5\10\0\5\5\17\0\3\5\1\0\6\5"+
    "\1\70\13\5\10\0\5\5\17\0\3\5\1\0\5\5"+
    "\1\71\1\72\13\5\10\0\5\5\17\0\3\5\1\0"+
    "\10\5\1\73\11\5\10\0\5\5\47\0\1\74\1\75"+
    "\65\0\1\76\24\0\3\5\1\0\22\5\10\0\1\5"+
    "\1\77\3\5\17\0\3\5\1\0\22\5\10\0\3\5"+
    "\1\100\1\5\17\0\3\101\1\0\22\101\10\0\5\101"+
    "\17\0\3\5\1\0\2\5\1\102\17\5\10\0\5\5"+
    "\17\0\3\5\1\0\10\5\1\103\11\5\10\0\5\5"+
    "\17\0\3\5\1\0\3\5\1\104\12\5\1\105\3\5"+
    "\10\0\5\5\17\0\3\5\1\0\6\5\1\106\13\5"+
    "\10\0\5\5\17\0\3\5\1\0\15\5\1\107\4\5"+
    "\10\0\5\5\17\0\3\5\1\0\13\5\1\110\6\5"+
    "\10\0\5\5\17\0\3\5\1\0\5\5\1\111\14\5"+
    "\10\0\5\5\17\0\3\5\1\0\1\5\1\112\20\5"+
    "\10\0\5\5\17\0\3\5\1\0\13\5\1\113\6\5"+
    "\10\0\5\5\17\0\3\5\1\0\2\5\1\114\17\5"+
    "\10\0\5\5\17\0\3\5\1\0\1\5\1\115\20\5"+
    "\10\0\5\5\17\0\3\5\1\0\3\5\1\116\16\5"+
    "\10\0\5\5\17\0\3\5\1\0\12\5\1\117\7\5"+
    "\10\0\5\5\17\0\3\5\1\0\7\5\1\120\12\5"+
    "\10\0\5\5\17\0\3\5\1\0\10\5\1\121\11\5"+
    "\10\0\5\5\17\0\3\5\1\0\2\5\1\122\17\5"+
    "\10\0\5\5\17\0\3\5\1\0\1\123\21\5\10\0"+
    "\5\5\17\0\3\5\1\0\5\5\1\124\14\5\10\0"+
    "\5\5\17\0\3\5\1\0\5\5\1\125\14\5\10\0"+
    "\5\5\17\0\3\74\1\126\22\74\3\0\1\127\4\0"+
    "\5\74\1\130\12\0\2\126\1\130\1\0\3\75\1\131"+
    "\22\75\10\0\5\75\1\132\12\0\2\131\1\132\1\0"+
    "\3\5\1\0\22\5\10\0\4\5\1\133\17\0\3\134"+
    "\1\135\22\134\10\0\5\134\13\0\2\135\2\0\3\5"+
    "\1\0\3\5\1\136\1\5\1\137\14\5\10\0\5\5"+
    "\17\0\3\5\1\0\5\5\1\140\14\5\10\0\5\5"+
    "\17\0\3\5\1\0\12\5\1\141\7\5\10\0\5\5"+
    "\17\0\3\5\1\0\10\5\1\142\11\5\10\0\5\5"+
    "\17\0\3\5\1\0\7\5\1\143\12\5\10\0\5\5"+
    "\17\0\3\5\1\0\10\5\1\144\11\5\10\0\5\5"+
    "\17\0\3\5\1\0\12\5\1\145\7\5\10\0\5\5"+
    "\17\0\3\5\1\0\1\146\21\5\10\0\5\5\17\0"+
    "\3\5\1\0\12\5\1\147\7\5\10\0\5\5\17\0"+
    "\3\5\1\0\12\5\1\150\7\5\10\0\5\5\17\0"+
    "\3\5\1\0\5\5\1\151\14\5\10\0\5\5\17\0"+
    "\3\5\1\0\2\5\1\152\17\5\10\0\5\5\17\0"+
    "\3\5\1\0\7\5\1\153\12\5\10\0\5\5\17\0"+
    "\3\5\1\0\3\5\1\154\16\5\10\0\5\5\17\0"+
    "\3\5\1\0\15\5\1\155\4\5\10\0\5\5\17\0"+
    "\3\5\1\0\1\5\1\156\20\5\10\0\5\5\17\0"+
    "\3\5\1\0\10\5\1\157\11\5\10\0\5\5\17\0"+
    "\3\5\1\0\1\5\1\160\20\5\10\0\5\5\17\0"+
    "\3\5\1\0\6\5\1\161\13\5\10\0\5\5\17\0"+
    "\3\5\1\0\15\5\1\162\4\5\10\0\5\5\17\0"+
    "\3\163\1\126\22\163\3\0\1\127\4\0\5\163\1\164"+
    "\12\0\2\126\1\164\31\0\1\165\31\0\3\163\1\126"+
    "\22\163\3\0\1\127\4\0\5\163\1\130\12\0\2\126"+
    "\1\130\1\0\3\166\1\131\22\166\10\0\5\166\1\167"+
    "\12\0\2\131\1\167\1\0\3\166\1\131\22\166\10\0"+
    "\5\166\1\132\12\0\2\131\1\132\1\0\3\134\1\135"+
    "\22\134\10\0\5\134\12\0\1\170\2\135\2\0\3\171"+
    "\1\135\22\171\10\0\5\171\13\0\2\135\2\0\3\5"+
    "\1\0\4\5\1\172\15\5\10\0\5\5\17\0\3\5"+
    "\1\0\10\5\1\173\11\5\10\0\5\5\17\0\3\5"+
    "\1\0\6\5\1\174\13\5\10\0\5\5\17\0\3\5"+
    "\1\0\5\5\1\175\14\5\10\0\5\5\17\0\3\5"+
    "\1\0\10\5\1\176\11\5\10\0\5\5\17\0\3\5"+
    "\1\0\1\5\1\177\20\5\10\0\5\5\17\0\3\5"+
    "\1\0\5\5\1\200\14\5\10\0\5\5\17\0\3\5"+
    "\1\0\5\5\1\201\14\5\10\0\5\5\17\0\3\5"+
    "\1\0\1\5\1\202\20\5\10\0\5\5\17\0\3\5"+
    "\1\0\1\203\21\5\10\0\5\5\17\0\3\5\1\0"+
    "\1\204\21\5\10\0\5\5\17\0\3\5\1\0\12\5"+
    "\1\205\7\5\10\0\5\5\17\0\3\5\1\0\10\5"+
    "\1\206\11\5\10\0\5\5\17\0\3\5\1\0\10\5"+
    "\1\207\11\5\10\0\5\5\17\0\3\5\1\0\13\5"+
    "\1\210\6\5\10\0\5\5\17\0\3\5\1\0\5\5"+
    "\1\211\14\5\10\0\5\5\17\0\3\5\1\0\2\5"+
    "\1\212\17\5\10\0\5\5\17\0\3\5\1\0\2\5"+
    "\1\213\17\5\10\0\5\5\17\0\3\5\1\0\6\5"+
    "\1\214\13\5\10\0\5\5\17\0\3\163\1\0\22\163"+
    "\3\0\1\127\4\0\5\163\1\164\14\0\1\164\32\0"+
    "\1\127\11\0\1\164\14\0\1\164\1\0\3\166\1\0"+
    "\22\166\10\0\5\166\1\167\14\0\1\167\44\0\1\167"+
    "\14\0\1\167\1\0\3\171\1\0\22\171\10\0\5\171"+
    "\12\0\1\170\4\0\3\5\1\0\1\215\21\5\10\0"+
    "\5\5\17\0\3\5\1\0\16\5\1\216\3\5\10\0"+
    "\5\5\17\0\3\5\1\0\5\5\1\217\14\5\10\0"+
    "\5\5\17\0\3\5\1\0\12\5\1\220\7\5\10\0"+
    "\5\5\17\0\3\5\1\0\6\5\1\221\13\5\10\0"+
    "\5\5\17\0\3\5\1\0\1\5\1\222\20\5\10\0"+
    "\5\5\17\0\3\5\1\0\2\5\1\223\17\5\10\0"+
    "\5\5\17\0\3\5\1\0\14\5\1\224\5\5\10\0"+
    "\5\5\17\0\3\5\1\0\12\5\1\225\7\5\10\0"+
    "\5\5\17\0\3\5\1\0\6\5\1\226\13\5\10\0"+
    "\5\5\17\0\3\5\1\0\5\5\1\227\14\5\10\0"+
    "\5\5\17\0\3\5\1\0\1\230\21\5\10\0\5\5"+
    "\17\0\3\5\1\0\6\5\1\231\13\5\10\0\5\5"+
    "\17\0\3\5\1\0\15\5\1\232\4\5\10\0\5\5"+
    "\17\0\3\5\1\0\5\5\1\233\14\5\10\0\5\5"+
    "\17\0\3\5\1\0\10\5\1\234\11\5\10\0\5\5"+
    "\17\0\3\5\1\0\6\5\1\235\13\5\10\0\5\5"+
    "\17\0\3\5\1\0\10\5\1\236\11\5\10\0\5\5"+
    "\17\0\3\5\1\0\1\237\21\5\10\0\5\5\17\0"+
    "\3\5\1\0\1\5\1\240\20\5\10\0\5\5\17\0"+
    "\3\5\1\0\1\5\1\241\20\5\10\0\5\5\17\0"+
    "\3\5\1\0\6\5\1\242\13\5\10\0\5\5\17\0"+
    "\3\5\1\0\20\5\1\243\1\5\10\0\5\5\17\0"+
    "\3\5\1\0\15\5\1\244\4\5\10\0\5\5\17\0"+
    "\3\5\1\0\10\5\1\245\11\5\10\0\5\5\17\0"+
    "\3\5\1\0\1\5\1\246\20\5\10\0\5\5\17\0"+
    "\3\5\1\0\5\5\1\247\14\5\10\0\5\5\17\0"+
    "\3\5\1\0\7\5\1\250\12\5\10\0\5\5\17\0"+
    "\3\5\1\0\5\5\1\251\14\5\10\0\5\5\17\0"+
    "\3\5\1\0\12\5\1\252\7\5\10\0\5\5\17\0"+
    "\3\5\1\0\7\5\1\253\12\5\10\0\5\5\17\0"+
    "\3\5\1\0\6\5\1\254\13\5\10\0\5\5\17\0"+
    "\3\5\1\0\6\5\1\255\13\5\10\0\5\5\17\0"+
    "\3\5\1\0\5\5\1\256\14\5\10\0\5\5\17\0"+
    "\3\5\1\0\13\5\1\257\6\5\10\0\5\5\17\0"+
    "\3\5\1\0\3\5\1\260\16\5\10\0\5\5\17\0"+
    "\3\5\1\0\12\5\1\261\7\5\10\0\5\5\17\0"+
    "\3\5\1\0\6\5\1\262\13\5\10\0\5\5\17\0"+
    "\3\5\1\0\5\5\1\263\14\5\10\0\5\5\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\16\1\3\11\1\1\1\11"+
    "\4\1\12\11\24\1\1\0\1\1\1\11\2\1\1\0"+
    "\24\1\3\0\3\1\2\0\25\1\2\0\1\11\2\1"+
    "\1\11\1\0\72\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


String ruta = "src"+File.separator+"compilador"+File.separator+"tokens.txt";


/*-----------------------------LISTAS PARA LOS TOKENS----------------------*/
      ArrayList<String> numL = new ArrayList<>();
      ArrayList<String> operaL = new ArrayList<>();
      ArrayList<String> identL = new ArrayList<>();
      ArrayList<String> reserL = new ArrayList<>();
      ArrayList<String> signL = new ArrayList<>();
/*-------------------------------------------------------------------------*/    
 
/*-----------------------ESCRIBIR EN TOKEN--------------------------------*/     
    public void EscribirArchivo(String cadena) {
        try {
            FileWriter fw = new FileWriter(ruta, true);
            fw.write(cadena);
            fw.close();
        } catch (IOException ex) {
     
        }
    }
/*-----------------------------------------------------------------------*/

/*---------------------FUNCION VERIFICAR INCLUIR------------------------*/        
    public void EscribirArchivoInclude(String cadena) {
        try {
            FileWriter fw = new FileWriter("src"+File.separator+"compilador"+File.separator+"include.txt", true);
            fw.write(cadena);
            fw.close();
        } catch (IOException ex) {
     
        }
    }
     public void VerificarArchivo(String rutaX) {
        File af = new File("src" + File.separator + "compilador" + File.separator + rutaX);
        if (af.isFile() && af.exists()) {
            System.out.println("EL ARCHIVO EXISTE");

            String cadena;
            FileReader f = null;
            try {
                f = new FileReader("src" + File.separator + "compilador" + File.separator + rutaX);
            } catch (FileNotFoundException ex) {

            }
            BufferedReader b = new BufferedReader(f);
            try {
                while ((cadena = b.readLine()) != null) {
                    System.out.println(cadena);
                    EscribirArchivoInclude(cadena + "\r\n");

                }
            } catch (IOException ex) {

            }
            try {
                b.close();
            } catch (IOException ex) {

            }
        } else {
            System.out.println("EL ARCHIVO NO EXISTE");
        }
    }
     
/*----------------------------------------------------------------------*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico1(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error lexico:" +yytext());
            }
          case 49: break;
          case 2: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.NUMERO,new Token(yycolumn,yyline,yytext()));
            }
          case 50: break;
          case 3: 
            { System.out.println("Identificador: "+yytext()); identL.add(yytext());   EscribirArchivo("IDENTIFICADOR: " + yytext()+ "\r\n");
            }
          case 51: break;
          case 4: 
            { return new Symbol(sym.TAB,new Token(yycolumn,yyline,yytext()));
            }
          case 52: break;
          case 5: 
            { System.out.println("Operador: "+yytext());
                            return new Symbol(sym.SUMA,new Token(yycolumn,yyline,yytext()));
            }
          case 53: break;
          case 6: 
            { System.out.println("Operador: "+yytext());
                            return new Symbol(sym.RESTA,new Token(yycolumn,yyline,yytext()));
            }
          case 54: break;
          case 7: 
            { System.out.println("Operador: "+yytext());
                            return new Symbol(sym.MULT,new Token(yycolumn,yyline,yytext()));
            }
          case 55: break;
          case 8: 
            { System.out.println("Operador: "+yytext());
                            return new Symbol(sym.DIV,new Token(yycolumn,yyline,yytext()));
            }
          case 56: break;
          case 9: 
            { System.out.println("Operador: "+yytext());
                            return new Symbol(sym.POTENCIA,new Token(yycolumn,yyline,yytext()));
            }
          case 57: break;
          case 10: 
            { System.out.println("Operador: "+yytext());
                            return new Symbol(sym.MENOR,new Token(yycolumn,yyline,yytext()));
            }
          case 58: break;
          case 11: 
            { System.out.println("Operador: "+yytext());
                            return new Symbol(sym.MAYOR,new Token(yycolumn,yyline,yytext()));
            }
          case 59: break;
          case 12: 
            { System.out.println("Operador: "+yytext());
                            return new Symbol(sym.MODULO,new Token(yycolumn,yyline,yytext()));
            }
          case 60: break;
          case 13: 
            { System.out.println("SIGNO: "+yytext());
                            return new Symbol(sym.CORCHETEINI,new Token(yycolumn,yyline,yytext()));
            }
          case 61: break;
          case 14: 
            { System.out.println("SIGNO: "+yytext());
                            return new Symbol(sym.CORCHETEFIN,new Token(yycolumn,yyline,yytext()));
            }
          case 62: break;
          case 15: 
            { System.out.println("SIGNO: "+yytext());
                            return new Symbol(sym.DOSP,new Token(yycolumn,yyline,yytext()));
            }
          case 63: break;
          case 16: 
            { System.out.println("SIGNO: "+yytext());
                            return new Symbol(sym.PCOMA,new Token(yycolumn,yyline,yytext()));
            }
          case 64: break;
          case 17: 
            { System.out.println("SIGNO: "+yytext());
                            return new Symbol(sym.COMA,new Token(yycolumn,yyline,yytext()));
            }
          case 65: break;
          case 18: 
            { System.out.println("SIGNO: "+yytext());
                            return new Symbol(sym.PUNTO,new Token(yycolumn,yyline,yytext()));
            }
          case 66: break;
          case 19: 
            { System.out.println("SIGNO: "+yytext());
                            return new Symbol(sym.PARINI,new Token(yycolumn,yyline,yytext()));
            }
          case 67: break;
          case 20: 
            { System.out.println("SIGNO: "+yytext());
                            return new Symbol(sym.PARFIN,new Token(yycolumn,yyline,yytext()));
            }
          case 68: break;
          case 21: 
            { System.out.println("SIGNO: "+yytext());
            }
          case 69: break;
          case 22: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.SI,new Token(yycolumn,yyline,yytext()));
            }
          case 70: break;
          case 23: 
            { System.out.println("Comentario: "+yytext());
            }
          case 71: break;
          case 24: 
            { System.out.println("Operador: "+yytext());
            }
          case 72: break;
          case 25: 
            { System.out.println("Operador: "+yytext());
                            return new Symbol(sym.DISY,new Token(yycolumn,yyline,yytext()));
            }
          case 73: break;
          case 26: 
            { System.out.println("Operador: "+yytext());
                            return new Symbol(sym.CONJ,new Token(yycolumn,yyline,yytext()));
            }
          case 74: break;
          case 27: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.NULO,new Token(yycolumn,yyline,yytext()));
            }
          case 75: break;
          case 28: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.SINO,new Token(yycolumn,yyline,yytext()));
            }
          case 76: break;
          case 29: 
            { System.out.println("Texto: "+yytext());
            }
          case 77: break;
          case 30: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.CLASE,new Token(yycolumn,yyline,yytext()));
            }
          case 78: break;
          case 31: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.ABRIR,new Token(yycolumn,yyline,yytext()));
            }
          case 79: break;
          case 32: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.FALSO,new Token(yycolumn,yyline,yytext()));
            }
          case 80: break;
          case 33: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.DESDE,new Token(yycolumn,yyline,yytext()));
            }
          case 81: break;
          case 34: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.HACER,new Token(yycolumn,yyline,yytext()));
            }
          case 82: break;
          case 35: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.ITERAR,new Token(yycolumn,yyline,yytext()));
            }
          case 83: break;
          case 36: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.TNUMERO,new Token(yycolumn,yyline,yytext()));
            }
          case 84: break;
          case 37: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.CADENA,new Token(yycolumn,yyline,yytext()));
            }
          case 85: break;
          case 38: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.INCLUIR,new Token(yycolumn,yyline,yytext()));
            }
          case 86: break;
          case 39: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.FUNCION,new Token(yycolumn,yyline,yytext()));
            }
          case 87: break;
          case 40: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.RETORNAR,new Token(yycolumn,yyline,yytext()));
            }
          case 88: break;
          case 41: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.ENTONCES,new Token(yycolumn,yyline,yytext()));
            }
          case 89: break;
          case 42: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.ESCRIBIR,new Token(yycolumn,yyline,yytext()));
            }
          case 90: break;
          case 43: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.BOOLEANO,new Token(yycolumn,yyline,yytext()));
            }
          case 91: break;
          case 44: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.MIENTRAS,new Token(yycolumn,yyline,yytext()));
            }
          case 92: break;
          case 45: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.PARACADA,new Token(yycolumn,yyline,yytext()));
            }
          case 93: break;
          case 46: 
            { System.out.println("RESERVADA: "+yytext()); 
                            return new Symbol(sym.PRINCIPAL,new Token(yycolumn,yyline,yytext()));
            }
          case 94: break;
          case 47: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.VERDADERO,new Token(yycolumn,yyline,yytext()));
            }
          case 95: break;
          case 48: 
            { System.out.println("RESERVADA: "+yytext());
                            return new Symbol(sym.INCREMENTAR,new Token(yycolumn,yyline,yytext()));
            }
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
